buildscript {
    ext {
        kotlin_version = "1.3.50"
        android_tools_version = '3.5.0'
        coroutines_version = "1.3.0"

        build_tools_version = "28.0.3"

        min_sdk_version = 19
        compile_sdk_version = 28
        target_sdk_version = compile_sdk_version

        support_lib_version = "28.0.0"
        constraint_layout_version = "1.1.3"

        test_runner_version = "1.0.2"
        test_rules_version = test_runner_version
        test_orchestrator_version = test_runner_version
        espresso_version = "3.0.2"
        junit_version = "4.12"
        mockk_version = "1.9.3"
        assertk_version = "0.13"
        detekt_version = "1.0.0-RC14"

        spongycastle_version = "1.58.0.0"
        kethereum_version = "0.76.1"
        khex_version = "1.0.0-RC3"
        kotlin_common_version = "0.3.1"
        jacoco_version = "0.8.4"

        current_release_version = "0.3.4"
    }

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$android_tools_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.dcendents:android-maven-gradle-plugin:2.1"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"

        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
    }
}

plugins {
    id "io.errorlab.gradle.vault" version "0.1.0"
}

apply plugin: "io.gitlab.arturbosch.detekt"

detekt {
    version = detekt_version
    input = files(
            "$projectDir"
    )
    //config = "${projectDir}/detekt.yml"
    filters = ".*test.*,.*/resources/.*,.*/tmp/.*,.*/build/.*"
    parallel = true
    reports {
        xml {
            enabled = true
            destination = file("${project.buildDir}/reports/detekt.xml")
        }
        html {
            enabled = true
            destination = file("${project.buildDir}/reports/detekt.html")
        }
    }
}

allprojects {

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = jacoco_version
    }

    repositories {
        google()
        jcenter()

        maven { url 'https://jitpack.io' }
    }

    //address warnings about multiple kotlin runtimes in classpath
    configurations.all {
        resolutionStrategy.dependencySubstitution {
            substitute module("org.jetbrains.kotlin:kotlin-stdlib-jre7") because "warning about multiple runtimes in the classpath" with module("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
            substitute module("org.jetbrains.kotlin:kotlin-stdlib-jre8") because "warning about multiple runtimes in the classpath" with module("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")

        }
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.jetbrains.kotlin' && requested.name in [
                    'kotlin-reflect', 'kotlin-stdlib', 'kotlin-stdlib-common',
                    'kotlin-stdlib-jdk7', 'kotlin-stdlib-jdk8',
            ]) {
                details.useVersion kotlin_version
            }
        }
    }
}

subprojects { subproject ->

    afterEvaluate {

        if (subproject.plugins.hasPlugin("com.android.application") || subproject.plugins.hasPlugin("com.android.library")) {
            subproject.android {
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
            }
        }

        subproject.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }
}

apply from: "publishing.gradle"

task jacocoReport(type: JacocoReport) {
    subprojects { sub ->
        afterEvaluate {
            //subproject tasks can only be gathered after evaluation
            def testTasks = sub.tasks.withType(Test)
            dependsOn testTasks
            executionData testTasks
        }
        classDirectories.from(file("${sub.buildDir}/classes/java/main"))
        classDirectories.from(file("${sub.buildDir}/classes/kotlin/main"))
    }

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
